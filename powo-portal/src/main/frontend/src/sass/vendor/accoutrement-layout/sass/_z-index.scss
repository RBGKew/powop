// Z-Index
// =======


// Z-Index
// -------
/// A list of named z-index layers, from lowest to highest index.
/// Nest lists (one level deep) for different z-index contexts.
/// @type List
/// @group z-index
/// @example scss -
///   $z-index: (
///     'main',
///     'sidebar',
///     'banner' 'active-nav' 'dropdown',
///     'message',
///     'modal',
///   );
$z-index: ();


// Z-Index [function]
// ------------------
/// Return the numeric index of a named layer in your `$z-index` variable.
/// @group z-index
/// @param {String} $layer -
///   The name of a z-index layer in your configuration.
/// @require {Variable} $z-index
/// @return {Number} -
///   The z-index value associated with the given layer in your configuration.
@function z-index(
  $layer
) {
  $index: index($z-index, $layer);
  $nested: null;

  @if $index {
    @return $index;
  } @else {
    @for $i from 1 through length($z-index) {
      $stack: nth($z-index, $i);
      $index: $i;
      $nested: index($stack, $layer);

      @if type-of($nested) == 'number' {
        @if $nested == 1 {
          @return $index;
        } @else if $nested > 1 {
          @return $nested;
        }
      }
    }
  }

  @if type-of($layer) != 'number' {
    @error '#{$layer} is not a valid z-index.';
  }

  @return $layer;
}


// Z-Index [mixin]
// ---------------
/// Output the `z-index` property and value of a given layer
/// in your `$z-index` configuration.
/// @group z-index
/// @param {String} $layer -
///   The name of a z-index layer in your configuration.
/// @require {Function} z-index
/// @require {Variable} $z-index
/// @output -
///   The z-index property with a value based on your configuration.
@mixin z-index(
  $layer
) {
  z-index: z-index($layer);
}
